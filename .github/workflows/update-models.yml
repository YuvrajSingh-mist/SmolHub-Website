name: Update Models Data

# Permissions nee    - name: Update models from GitHub API and regenerate markdown files
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üîç Fetching latest data from GitHub API..."
        python update_models.py --fetch --github-token $GITHUB_TOKEN
        echo "üìÖ Fetching GitHub creation dates for models and datasets..."
        python fetch_github_dates.py
        echo "üîÑ Regenerating all model markdown files with new guidelines..."
        echo "  - Using model-implementation layout"
        echo "  - Converting images to raw.githubusercontent.com URLs"
        echo "  - Using exact GitHub API data with real commit dates"
        echo "  - Standardized frontmatter and content structure"
        python regenerate_models.py
        echo "üîß Running comprehensive standardization..."
        python standardize_markdowns.py
        echo "üîç Validating that all guidelines are followed..."
        python validate_guidelines.pyflow
permissions:
  contents: write
  pull-requests: write

on:
  # Run weekly on Sundays at 6 AM UTC
  schedule:
    - cron: '0 6 * * 0'
  
  # Allow manual trigger
  workflow_dispatch:
  
  # Run when models.json or scripts are updated
  push:
    paths:
      - '_data/models.json'
      - 'update_models.py'
      - 'generate_model_files.py'

jobs:
  update-models:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
    
    - name: Update models from GitHub API and regenerate markdown files
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üîç Fetching latest data from GitHub API..."
        python update_models.py --fetch --github-token $GITHUB_TOKEN
        echo "üîÑ Regenerating all model markdown files with new guidelines..."
        echo "  - Using model-implementation layout"
        echo "  - Converting images to raw.githubusercontent.com URLs"
        echo "  - Using exact GitHub API data"
        echo "  - Standardized frontmatter and content structure"
        python regenerate_models.py
        echo "ÔøΩ Running comprehensive standardization..."
        python standardize_markdowns.py
        echo "üîç Validating that all guidelines are followed..."
        python validate_guidelines.py
    
    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Pull latest changes first to avoid conflicts
        git pull origin master --rebase || {
          echo "‚ö†Ô∏è Rebase conflicts detected, trying merge strategy"
          git rebase --abort 2>/dev/null || true
          git pull origin master --no-rebase
        }
        
        git add .
        git commit -m "ü§ñ Auto-update models from GitHub API" || {
          echo "‚ö†Ô∏è Nothing to commit or commit failed"
          exit 0
        }
        
        # Try to push, with retry logic
        for i in {1..3}; do
          if git push; then
            echo "‚úÖ Push successful on attempt $i"
            break
          else
            echo "‚ö†Ô∏è Push failed on attempt $i, pulling latest changes..."
            git pull origin master --rebase
            if [ $i -eq 3 ]; then
              echo "‚ùå Failed to push after 3 attempts"
              exit 1
            fi
          fi
        done 
