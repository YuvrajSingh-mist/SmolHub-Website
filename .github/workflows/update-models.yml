name: Update Models Data

permissions:
  contents: write
  pull-requests: write

on:
  # Run weekly on Sundays at 6 AM UTC
  schedule:
    - cron: '0 6 * * 0'
  # Allow manual trigger
  workflow_dispatch:
  # Run when models.json or scripts are updated
  push:
    paths:
      - '_data/models.json'
      - 'update_models.py'
      - 'generate_model_files.py'

jobs:
  update-models:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      - name: Update models from GitHub API and regenerate markdown files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Fetching latest data from GitHub API..."
          python update_models.py --fetch --github-token $GITHUB_TOKEN
          echo "üìÖ Fetching GitHub creation dates for models only..."
          python fetch_github_dates.py --only models
          echo "üîÑ Regenerating all model markdown files with new guidelines..."
          echo "  - Using model-implementation layout"
          echo "  - Converting images to raw.githubusercontent.com URLs"
          echo "  - Using exact GitHub API data with real commit dates"
          echo "  - Standardized frontmatter and content structure"
          python regenerate_models.py
          echo "üîß Running comprehensive standardization..."
          python standardize_markdowns.py
          echo "üîó Converting any github.com/.../raw/... image URLs to raw.githubusercontent.com"
          find _models -name '*.md' -exec sed -i 's#https://github.com/\([^/]\+\)/\([^/]\+\)/raw/\([^/]\+\)/\([^)]\+\)#https://raw.githubusercontent.com/\1/\2/\3/\4#g' {} +

      - name: Validate guidelines
        run: |
          echo "üîç Validating that all guidelines are followed..."
          python validate_guidelines.py
          python validate_datasets.py

      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions"
          
          # Stage model-related changes
          git add _models/ _data/models.json || true
          
          # Commit local changes first to avoid pull errors
          git commit -m "üîÑ Auto-update models and validate guidelines" || exit 0
          
          # Pull latest changes with rebase, fallback to merge
          git pull origin master --rebase || { git rebase --abort 2>/dev/null || true; git pull origin master --no-rebase; }
          
          # Push with retry
          for i in {1..3}; do
            if git push; then
              echo "‚úÖ Push successful on attempt $i"
              break
            else
              echo "‚ö†Ô∏è Push failed on attempt $i, pulling latest changes..."
              git pull origin master --rebase || { git rebase --abort 2>/dev/null || true; git pull origin master --no-rebase; }
              if [ $i -eq 3 ]; then
                echo "‚ùå Failed to push after 3 attempts"
                exit 1
              fi
            fi
          done
