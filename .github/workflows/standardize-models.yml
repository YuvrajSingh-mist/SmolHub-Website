name: Standardize and Validate Models

# Permissions needed for the workflow
permissions:
  contents: write
  pull-requests: write

on:
  # Run automatically right after the Paper Replications workflow completes
  workflow_run:
    workflows: ["Update Paper Replications (From Scratch)"]
    types:
      - completed
  # Allow manual trigger
  workflow_dispatch:
  # Run when markdown files or standardization scripts are updated
  push:
    paths:
      - '_models/*.md'
      - 'standardize_markdowns.py'
      - 'validate_guidelines.py'
      - 'fix_image_links.py'
      - '_templates/*'
  # Run on pull requests that affect models
  pull_request:
    paths:
      - '_models/*.md'

jobs:
  standardize-and-validate:
    runs-on: ubuntu-latest
    # Only proceed when the upstream workflow succeeded (when triggered via workflow_run)
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Auto-fix old github.com/raw image URLs in _models
      run: |
        echo "🔗 Converting github.com/.../raw/... image URLs to raw.githubusercontent.com in _models/*.md"
        find _models -name '*.md' -exec sed -i 's#https://github.com/\([^/]\+\)/\([^/]\+\)/raw/\([^/]\+\)/\([^)]\+\)#https://raw.githubusercontent.com/\1/\2/\3/\4#g' {} +
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
    
    - name: Run comprehensive standardization
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "📅 Ensuring GitHub creation dates are up to date (models only)..."
        python fetch_github_dates.py --only models
        echo "�🔧 Running comprehensive markdown standardization..."
        echo "📋 This will ensure:"
        echo "  ✅ Consistent frontmatter format"
        echo "  ✅ Proper layout: model-implementation"
        echo "  ✅ Fixed image links using raw.githubusercontent.com"
        echo "  ✅ Standardized section structure"
        echo "  ✅ Template and automation setup"
        echo "  ✅ Accurate GitHub creation dates"
        echo ""
        python standardize_markdowns.py
        echo "🔗 Converting remaining local image paths to raw.githubusercontent.com"
        python convert_images_to_links.py || true
        echo ""
        echo "🔍 Running validation checks..."
        python validate_guidelines.py
    
    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "📝 Standardization changes detected!"
          git status --porcelain
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "✅ All files already follow standards."
        fi
    
    - name: Commit and push standardization changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action - Standardization"
        
        # Pull latest changes first to avoid conflicts
        git pull origin master --rebase || {
          echo "⚠️ Rebase conflicts detected, trying merge strategy"
          git rebase --abort 2>/dev/null || true
          git pull origin master --no-rebase
        }
        
        git add .
        git commit -m "🔧 Auto-standardize markdown files

        - Ensured consistent frontmatter format
        - Fixed image links to use raw.githubusercontent.com
        - Standardized content structure
        - Updated templates and automation" || {
          echo "⚠️ Nothing to commit or commit failed"
          exit 0
        }
        
        # Try to push, with retry logic
        for i in {1..3}; do
          if git push; then
            echo "✅ Push successful on attempt $i"
            break
          else
            echo "⚠️ Push failed on attempt $i, pulling latest changes..."
            git pull origin master --rebase
            if [ $i -eq 3 ]; then
              echo "❌ Failed to push after 3 attempts"
              exit 1
            fi
          fi
        done
        echo "🚀 Successfully standardized all markdown files!"
    
    - name: Post-validation check
      run: |
        echo "🔍 Final validation after any changes..."
        python validate_guidelines.py
        if [ $? -eq 0 ]; then
          echo "🎉 All validation checks passed!"
        else
          echo "⚠️  Some validation issues remain."
          exit 1
        fi
